/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FaqIndexImport } from './routes/faq/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as rootIndexImport } from './routes/(root)/index'
import { Route as TrackTrackIdImport } from './routes/track/$trackId'

// Create/Update Routes

const FaqIndexRoute = FaqIndexImport.update({
  id: '/faq/',
  path: '/faq/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const rootIndexRoute = rootIndexImport.update({
  id: '/(root)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TrackTrackIdRoute = TrackTrackIdImport.update({
  id: '/track/$trackId',
  path: '/track/$trackId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/track/$trackId': {
      id: '/track/$trackId'
      path: '/track/$trackId'
      fullPath: '/track/$trackId'
      preLoaderRoute: typeof TrackTrackIdImport
      parentRoute: typeof rootRoute
    }
    '/(root)/': {
      id: '/(root)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootIndexImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/faq/': {
      id: '/faq/'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/track/$trackId': typeof TrackTrackIdRoute
  '/': typeof rootIndexRoute
  '/about': typeof AboutIndexRoute
  '/faq': typeof FaqIndexRoute
}

export interface FileRoutesByTo {
  '/track/$trackId': typeof TrackTrackIdRoute
  '/': typeof rootIndexRoute
  '/about': typeof AboutIndexRoute
  '/faq': typeof FaqIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/track/$trackId': typeof TrackTrackIdRoute
  '/(root)/': typeof rootIndexRoute
  '/about/': typeof AboutIndexRoute
  '/faq/': typeof FaqIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/track/$trackId' | '/' | '/about' | '/faq'
  fileRoutesByTo: FileRoutesByTo
  to: '/track/$trackId' | '/' | '/about' | '/faq'
  id: '__root__' | '/track/$trackId' | '/(root)/' | '/about/' | '/faq/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  TrackTrackIdRoute: typeof TrackTrackIdRoute
  rootIndexRoute: typeof rootIndexRoute
  AboutIndexRoute: typeof AboutIndexRoute
  FaqIndexRoute: typeof FaqIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  TrackTrackIdRoute: TrackTrackIdRoute,
  rootIndexRoute: rootIndexRoute,
  AboutIndexRoute: AboutIndexRoute,
  FaqIndexRoute: FaqIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/track/$trackId",
        "/(root)/",
        "/about/",
        "/faq/"
      ]
    },
    "/track/$trackId": {
      "filePath": "track/$trackId.tsx"
    },
    "/(root)/": {
      "filePath": "(root)/index.tsx"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/faq/": {
      "filePath": "faq/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
